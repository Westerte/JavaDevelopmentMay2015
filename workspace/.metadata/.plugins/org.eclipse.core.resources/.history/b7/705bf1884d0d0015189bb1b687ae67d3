package edu.nesterenko.airline.dao;

import java.io.FileInputStream;
import java.io.FileNotFoundException;

import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import edu.nesterenko.airline.creator.AirlinerCreator;
import edu.nesterenko.airline.creator.FreighterCreator;
import edu.nesterenko.airline.entity.Manufacturer;
import edu.nesterenko.airline.exception.LogicalException;
import edu.nesterenko.airline.exception.PhisicalException;
import edu.nesterenko.airline.logic.AirlineEditor;

public class StaxParserDao implements DataAccessable {
	XMLStreamReader reader;
	private Manufacturer manufacturer;
	private String numberPlate;
	private String model;
	private int maxRange;
	private int capacity;
	private int bearingCapacity;
	private int fuelConsumption;
	private int seatsCount;
	private int classCount;
	private int luggageCapacity;
	private int cargoHoldCount;
	
	@Override
	public void loadDataFromSource(Object... args) throws PhisicalException,
			LogicalException {
		String filePath = (String)args[0];
		XMLInputFactory inputFactory = XMLInputFactory.newInstance();
		try {
			reader = inputFactory.createXMLStreamReader(new FileInputStream(filePath));
			parsing();
		} catch (FileNotFoundException | XMLStreamException e) {
			throw new PhisicalException(e);
		} 
	}
	
	private void parsing() {
		while (reader.hasNext()) {
            int type = reader.next();
            switch (type) {
                case XMLStreamConstants.START_ELEMENT:
                    name = reader.getLocalName();
                    switch (BookEnum.valueOf(name.toUpperCase())) {
                        case LIBRARY:
                            library = new Library();
                            books = (ArrayList<Book>) library.getBook();
                            break;
                        case BOOK:
                            currentBook = new Book();
                            currentBook.setID(reader.getAttributeValue(0));
                            currentBook.setBookName(reader.getAttributeValue(1));
                            break;
                        default:
                            writeBookFeature(reader);
                            break;
                    }
                    break;

                case XMLStreamConstants.END_ELEMENT:
                    name = reader.getLocalName();
                    switch (BookEnum.valueOf(name.toUpperCase())) {
                        case LIBRARY:
                            return library;
                        case BOOK:
                            books.add(currentBook);
                            break;
                    }
                    break;
            }
        }
	}
	
	private void addAirliner() {
		try {
			AirlineEditor.addAirplane(new AirlinerCreator(), new Object[] {numberPlate, manufacturer, model, maxRange, capacity, bearingCapacity, 
									  fuelConsumption, seatsCount, classCount, luggageCapacity});
		} catch (PhisicalException | LogicalException e) {}	
	}
	
	private void addFrighter() {
		try {
			AirlineEditor.addAirplane(new FreighterCreator(), new Object[] {numberPlate, manufacturer, model, maxRange, capacity, bearingCapacity, 
				                      fuelConsumption, cargoHoldCount});
		} catch (PhisicalException | LogicalException e) {}
	}

	@Override
	public void saveDataToSource(Object... args) {
		throw new UnsupportedOperationException();
	}

}
