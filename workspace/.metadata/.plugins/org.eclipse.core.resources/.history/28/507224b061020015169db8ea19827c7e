package edu.nesterenko.airline.dao;

import org.xml.sax.Attributes;
import org.xml.sax.helpers.DefaultHandler;

import edu.nesterenko.airline.entity.Model;
import edu.nesterenko.airline.exception.LogicalException;
import edu.nesterenko.airline.exception.PhisicalException;
import edu.nesterenko.airline.logic.AirlineEditor;
import edu.nesterenko.airline.logic.FreighterCreator;

public class SaxParserDao extends DefaultHandler implements DataAccessable {

	private TagsEnum currentTag;
	private Model model;
	private int maxRange;
	private int capacity;
	private int bearingCapacity;
	private int fuelConsumption;
	private int seatsCount;
	private int classCount;
	private int luggageCapacity;
	private int cargoHoldCount;
	@Override
	public void loadDataFromSource(Object... args) throws PhisicalException,
			LogicalException {
		
	}
	
	@Override 
    public void startElement(String namespaceURI, String localName, String qName, Attributes atts) { 
		if (!"airline".equals(qName)){
			currentTag = TagsEnum.valueOf(qName.toUpperCase());
        } 
    }
    
    @Override
    public void endElement(String uri, String localName,String qName){
        
    }
    
    @Override 
    public void characters(char[] ch, int start, int length){ 
    	String value = new String(ch, start, length).trim();
        switch (currentTag) {
        case MODEL:
        	model = Model.valueOf(value.toUpperCase());
        	break;
        case MAX_RANGE:
        	maxRange = Integer.parseInt(value);
        	break;
        case CAPACITY:
        	capacity = Integer.parseInt(value);
        	break;
        case BEARING_CAPACITY:
        	bearingCapacity = Integer.parseInt(value);
        	break;
        case FUEL_CONSUMPTION:
        	fuelConsumption = Integer.parseInt(value);
        	break;
        case SEATS_COUNT:
        	seatsCount = Integer.parseInt(value);
        	break;
        case CLASS_COUNT:
        	classCount = Integer.parseInt(value);
        	break;
        case LUGGAGE_CAPACITY:
        	luggageCapacity = Integer.parseInt(value);
        	break;
        case CARGO_HOLD_COUNT:
        	cargoHoldCount = Integer.parseInt(value);
        	break;
        case AIRBUS:        	
        	break;
        case FREIGHTER:
        	AirlineEditor.addAirplane(new FreighterCreator(), new Object[]{model, maxRange, capacity, 5, 4});
        	break;
        }
    }

	@Override
	public void saveDataToSource(Object... args) {
		throw new UnsupportedOperationException();
	}
	
	enum TagsEnum{
	    MODEL, MAX_RANGE, CAPACITY, BEARING_CAPACITY, FUEL_CONSUMPTION,
	    SEATS_COUNT, CLASS_COUNT, LUGGAGE_CAPACITY, CARGO_HOLD_COUNT, AIRBUS, FREIGHTER;
	}

}
