package edu.nesterenko.touroperator.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


import edu.nesterenko.touroperator.connectionpool.ConnectionPool;
import edu.nesterenko.touroperator.connectionpool.ConnectionPoolException;
import edu.nesterenko.touroperator.entity.Country;
import edu.nesterenko.touroperator.connectionpool.ConnectionWrapper;

public class CountryDao implements AbstractDao<Integer, Country> {
	
	private final static String FIND_ALL = "SELECT * FROM `country`";
	private final static String ADD_COUNTRY = "INSERT INTO `country`"
			+ "(`country_name`) VALUES(?)";
	@Override
	public List<Country> findAll() throws DaoException {
		List<Country> countryList = new ArrayList<Country>();
		ConnectionPool connectionPool = ConnectionPool.getInstance();
		Statement statement = null;
		ConnectionWrapper connection = null;
		try {
			connection = connectionPool.grapConnection();
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery(FIND_ALL);
			while(resultSet.next()) {
				countryList.add(new Country(resultSet.getInt("country_id"), 
						resultSet.getString("country_name")));
			}
		} catch (ConnectionPoolException | SQLException e) {
			throw new DaoException(e);
		} finally {
			closeStatement(statement);
			connectionPool.releaseConnection(connection);
		}
		return countryList;
	}

	@Override
	public List<Country> findByKey(Integer key) {
		throw new UnsupportedOperationException();
	}

	@Override
	public void add(Integer key, Country entity) throws DaoException {
		ConnectionPool connectionPool = ConnectionPool.getInstance();
		PreparedStatement statement = null;
		ConnectionWrapper connection = null;
		try {
			connection = connectionPool.grapConnection();
			statement = connection.prepareStatement(ADD_COUNTRY);
			statement.setString(1, entity.getName());
			statement.executeUpdate();
		} catch (ConnectionPoolException | SQLException e) {
			throw new DaoException(e);
		} finally {
			closeStatement(statement);
			connectionPool.releaseConnection(connection);
		}
	}

	@Override
	public void delete(Integer key) {
		throw new UnsupportedOperationException();
		
	}

	@Override
	public void delete(Country entity) {
		throw new UnsupportedOperationException();
		
	}

	@Override
	public Country update(Country entity) {
		// TODO Auto-generated method stub
		return null;
	}
	
}