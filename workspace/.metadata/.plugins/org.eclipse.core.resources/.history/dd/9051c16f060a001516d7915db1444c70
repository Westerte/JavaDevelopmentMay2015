package edu.nesterenko.parcer.logic;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import edu.nesterenko.parcer.entity.Component;
import edu.nesterenko.parcer.entity.Composite;

public class TextFinder {
	public static List<String> findSentenceOrderedByWordCount(Parser parser) {
		Component root = parser.getHierarchy();
		Map<Component, Integer> sentenceWordCountMap = new HashMap<Component, Integer>();
		findSentencesOrderedByWordCount(root, sentenceWordCountMap);
		if(sentenceWordCountMap) {
			
		}
		return null;		
	}
	private static void findSentencesOrderedByWordCount(Component father, Map<Component, Integer>  sentenceWordCountMap) {
		for(Component component : father) {
			if(component.getName() == "sentence"){
				sentenceWordCountMap.put(component, takeComponentsCountOfType("word", (Composite)component));
			}
			switch(component.getName()) {
			case "composite":
				findSentencesOrderedByWordCount(component, sentenceWordCountMap);
				break;
			case "leaf":
				break;
			}			
		}
	}
	private static int takeComponentsCountOfType(String name, Composite composite) {
		int result = 0;
		for(Component component : composite) {
			if(component.getName() == name) { 
				result++;
			}
		}
		return result;
	}
}
