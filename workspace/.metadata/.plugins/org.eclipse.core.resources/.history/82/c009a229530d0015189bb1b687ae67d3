package edu.nesterenko.airline.dao;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import edu.nesterenko.airline.creator.AirlinerCreator;
import edu.nesterenko.airline.creator.FreighterCreator;
import edu.nesterenko.airline.entity.Manufacturer;
import edu.nesterenko.airline.exception.LogicalException;
import edu.nesterenko.airline.exception.PhisicalException;
import edu.nesterenko.airline.logic.AirlineEditor;

public class DomParserDao implements DataAccessable {

	@Override
	public void loadDataFromSource(Object... args) throws PhisicalException,
			LogicalException {
		String filePath = (String) args[0];		
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
	    DocumentBuilder builder;
		try {
			builder = factory.newDocumentBuilder();
			Document document = builder.parse(new File(filePath));
			Element root = document.getDocumentElement();
			NodeList airlinerList = root.getElementsByTagName("airpliner");
			for(int i = 0; i < airlinerList.getLength(); i++) {
				Element airlinerElement = (Element)airlinerList.item(i);
				addAirliner(airlinerElement);
			}
		} catch (SAXException | IOException | ParserConfigurationException e) {
			throw new PhisicalException(e); 
		}
     
	}
	
	private void addAirliner(Element airlinerElement) {
		Manufacturer manufacturer;
		String numberPlate ;
		String model;
		int maxRange;
		int capacity;
		int bearingCapacity;
		int fuelConsumption;
		int seatsCount;
		int classCount;
		int luggageCapacity;
		try {
			AirlineEditor.addAirplane(new AirlinerCreator(), new Object[] {numberPlate, manufacturer, model, maxRange, capacity, bearingCapacity, 
									  fuelConsumption, seatsCount, classCount, luggageCapacity});
		} catch (PhisicalException | LogicalException e) {}	
	}
	
	private void addFrighter() {
		Manufacturer manufacturer;
		String numberPlate;
		String model;
		int maxRange;
		int capacity;
		int bearingCapacity;
		int fuelConsumption;
		int cargoHoldCount;
		try {
			AirlineEditor.addAirplane(new FreighterCreator(), new Object[] {numberPlate, manufacturer, model, maxRange, capacity, bearingCapacity, 
				                      fuelConsumption, cargoHoldCount});
		} catch (PhisicalException | LogicalException e) {}
	}

	@Override
	public void saveDataToSource(Object... args) {
		throw new UnsupportedOperationException();
	}

}
