---REVIVE TEXT---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---FIND SENTENCE ORDERED BY WORD COUNT---

The output from the program is:  
Omitting them can make the code  more brittle. 
One possible implementation of the applyBrakes method could be as follows:  
Deciding when to omit the braces is a matter of personal taste. 
The if-then statement is the most basic of all the control flow statements. 
The compiler cannot catch this sort of error;  you'll just get the wrong results.  
The if-then-else statement provides a secondary path of execution when an "if" clause  evaluates to false. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains  only one statement:  
In this case, the  action is to simply print an error message stating that the bicycle has already stopped.  
It tells your program  to execute a certain section of code only if a particular test evaluates to true. 
However, once a condition is satisfied, the  appropriate statements are executed (grade = 'C';) and the remaining conditions are not  evaluated.
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the  end of the if-then statement.  
For example, the  Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already  in motion. 
If a second statement is later added to the "then" clause, a common mistake would  be forgetting to add the newly required braces. 
You may have noticed that the value of testscore can satisfy more than one expression in the  compound statement: 76 >= 70 and 76 >= 60. 
You could use an if-then-else statement in the applyBrakes method to  take some action if the brakes are applied when the bicycle is not in motion. 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for  a score of 90% or above, a B for a score of 80% or above, and so on.    


---DELETE WORDS STARTING WITH CONSONANT---

DONE

---SWAP FIRST AND LAST WORDS---

DONE

---REVIVE TEXT---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
 statements statement is  most basic of all  control flow if-then. true tells your program 
to execute a certain section of code only if a particular test evaluates to It.  motion,  
Bicycle class could allow  brakes to decrease  bicycle's speed only if  bicycle is already 
in example. follows possible implementation of  applyBrakes method could be as One: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
statement this test evaluates to false (meaning that  bicycle is  in motion), control jumps to  
end of  if-then If. 
statement addition,  opening and closing braces are optional, provided that  "then" clause contains 
only one In: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
taste when to omit  braces is a matter of personal Deciding. brittle them  make  code 
more Omitting. braces a second statement is later added to  "then" clause, a common mistake would 
be forgetting to add  newly required If.  results cannot catch this sort of error; 
'll just   wrong compiler. 
1.2.  The if-then-else Statement 
 false statement provides a secondary path of execution when an "if" clause 
evaluates to if-then-else.  motion use an if-then-else statement in  applyBrakes method to 
take some action if  brakes are applied when  bicycle is  in could. stopped this case,  
action is to simply print an error message stating that  bicycle  already In. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
 on program, IfElseDemo, assigns a grade based on  value of a test score: an A  
a score of 90% or above, a B  a score of 80% or above, and so following. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
 is from  program output: 
    Grade = C
  60 noticed that  value of testscore  satisfy more than one expression in  
compound statement: 76 >= 70 and 76 >= have. evaluated, once a condition is satisfied,  
appropriate statements are executed (grade = 'C';) and  remaining conditions are  
However.

---REVIVE TEXT---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
The if-then statement is the most basic of all the control flow statements. It tells your program 
to execute a certain section of code only if a particular test evaluates to true. For example, the 
Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already 
in motion. One possible implementation of the applyBrakes method could be as follows: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the 
end of the if-then statement. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains 
only one statement: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
Deciding when to omit the braces is a matter of personal taste. Omitting them can make the code 
more brittle. If a second statement is later added to the "then" clause, a common mistake would 
be forgetting to add the newly required braces. The compiler cannot catch this sort of error; 
you'll just get the wrong results. 
1.2.  The if-then-else Statement 
The if-then-else statement provides a secondary path of execution when an "if" clause 
evaluates to false. You could use an if-then-else statement in the applyBrakes method to 
take some action if the brakes are applied when the bicycle is not in motion. In this case, the 
action is to simply print an error message stating that the bicycle has already stopped. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for 
a score of 90% or above, a B for a score of 80% or above, and so on. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
The output from the program is: 
    Grade = C
You may have noticed that the value of testscore can satisfy more than one expression in the 
compound statement: 76 >= 70 and 76 >= 60. However, once a condition is satisfied, the 
appropriate statements are executed (grade = 'C';) and the remaining conditions are not 
evaluated.

---FIND SENTENCE ORDERED BY WORD COUNT---

The output from the program is:  
Omitting them can make the code  more brittle. 
One possible implementation of the applyBrakes method could be as follows:  
Deciding when to omit the braces is a matter of personal taste. 
The if-then statement is the most basic of all the control flow statements. 
The compiler cannot catch this sort of error;  you'll just get the wrong results.  
The if-then-else statement provides a secondary path of execution when an "if" clause  evaluates to false. 
In addition, the opening and closing braces are optional, provided that the "then" clause contains  only one statement:  
In this case, the  action is to simply print an error message stating that the bicycle has already stopped.  
It tells your program  to execute a certain section of code only if a particular test evaluates to true. 
However, once a condition is satisfied, the  appropriate statements are executed (grade = 'C';) and the remaining conditions are not  evaluated.
If this test evaluates to false (meaning that the bicycle is not in motion), control jumps to the  end of the if-then statement.  
For example, the  Bicycle class could allow the brakes to decrease the bicycle's speed only if the bicycle is already  in motion. 
If a second statement is later added to the "then" clause, a common mistake would  be forgetting to add the newly required braces. 
You may have noticed that the value of testscore can satisfy more than one expression in the  compound statement: 76 >= 70 and 76 >= 60. 
You could use an if-then-else statement in the applyBrakes method to  take some action if the brakes are applied when the bicycle is not in motion. 
The following program, IfElseDemo, assigns a grade based on the value of a test score: an A for  a score of 90% or above, a B for a score of 80% or above, and so on.    


---DELETE WORDS STARTING WITH CONSONANT---

DONE

---SWAP FIRST AND LAST WORDS---

DONE

---REVIVE TEXT---

1.  The if-then and if-then-else Statements 
1.1.  The if-then Statement 
 statements statement is  most basic of all  control flow if-then. true tells your program 
to execute a certain section of code only if a particular test evaluates to It.  motion,  
Bicycle class could allow  brakes to decrease  bicycle's speed only if  bicycle is already 
in example. follows possible implementation of  applyBrakes method could be as One: 
void applyBrakes() { 
    // the "if" clause: bicycle must be moving 
    if (isMoving){  
        // the "then" clause: decrease current speed 
        currentSpeed--; 
    } 
} 
statement this test evaluates to false (meaning that  bicycle is  in motion), control jumps to  
end of  if-then If. 
statement addition,  opening and closing braces are optional, provided that  "then" clause contains 
only one In: 
void applyBrakes() { 
    // same as above, but without braces  
    if (isMoving) 
        currentSpeed--; 
} 
taste when to omit  braces is a matter of personal Deciding. brittle them  make  code 
more Omitting. braces a second statement is later added to  "then" clause, a common mistake would 
be forgetting to add  newly required If.  results cannot catch this sort of error; 
'll just   wrong compiler. 
1.2.  The if-then-else Statement 
 false statement provides a secondary path of execution when an "if" clause 
evaluates to if-then-else.  motion use an if-then-else statement in  applyBrakes method to 
take some action if  brakes are applied when  bicycle is  in could. stopped this case,  
action is to simply print an error message stating that  bicycle  already In. 
void applyBrakes() { 
    if (isMoving) { 
        currentSpeed--; 
    } else { 
        System.err.println("The bicycle has already stopped!"); 
    }  
} 
 on program, IfElseDemo, assigns a grade based on  value of a test score: an A  
a score of 90% or above, a B  a score of 80% or above, and so following. 
 
class IfElseDemo { 
    public static void main(String[] args()) { 
 
        int testscore = 76; 
        char grade; 
 
        if (testscore >= 90) { 
            grade = 'A'; 
        } else if (testscore >= 80) {   
            grade = 'B'; 
        } else if (testscore >= 70) { 
            grade = 'C'; 
        } else if (testscore >= 60) { 
            grade = 'D'; 
        } else { 
            grade = 'F'; 
        } 
        System.out.println("Grade = " + grade); 
    } 
} 
 is from  program output: 
    Grade = C
  60 noticed that  value of testscore  satisfy more than one expression in  
compound statement: 76 >= 70 and 76 >= have. evaluated, once a condition is satisfied,  
appropriate statements are executed (grade = 'C';) and  remaining conditions are  
However.

---REVIVE TEXT---



---FIND SENTENCE ORDERED BY WORD COUNT---



---DELETE WORDS STARTING WITH CONSONANT---

DONE

---SWAP FIRST AND LAST WORDS---

DONE

---REVIVE TEXT---



