package edu.nesterenko.touroperator.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import edu.nesterenko.touroperator.connectionpool.ConnectionPool;
import edu.nesterenko.touroperator.connectionpool.ConnectionPoolException;
import edu.nesterenko.touroperator.connectionpool.ConnectionWrapper;
import edu.nesterenko.touroperator.entity.City;

public class CityDao implements AbstractDao<Integer, City> {
	private final static String FIND_ALL = "SELECT * FROM `city`";
	private final static String ADD_NEW = "INSERT INTO `city`"
			+ "(`city_name`, `city_description`, `country_id`)"
			+ " VALUES(?,?,?)";
	private final static String SELECT_BY_ID = 
			"SELECT * FROM `city` WHERE `city_id` = ?";
	private final static String DELETE_ELEMENT = "DELETE FROM `city` WHERE `city_id` = ?";
	private final static String UPDATE_ELEMENT = "UPDATE `city` SET `city_name` = ? "
			+ "`city_description` = ? `country_id` = ?";
	@Override
	public List<City> findAll() throws DaoException {
		List<City> cityList = new ArrayList<City>();
		ConnectionPool connectionPool = ConnectionPool.getInstance();
		Statement statement = null;
		ConnectionWrapper connection = null;
		try {
			connection = connectionPool.grapConnection();
			statement = connection.createStatement();
			ResultSet resultSet = statement.executeQuery(FIND_ALL);			
			while(resultSet.next()) {
				cityList.add(makeCity(resultSet));
			}
		} catch (ConnectionPoolException | SQLException e) {
			throw new DaoException(e);
		} finally {
			closeStatement(statement);
			connectionPool.releaseConnection(connection);
		}
		return cityList;
	}

	@Override
	public City findByKey(Integer key) throws DaoException {
		City city;
		ConnectionPool connectionPool = ConnectionPool.getInstance();
		PreparedStatement statement = null;
		ConnectionWrapper connection = null;
		try {
			connection = connectionPool.grapConnection();
			statement = connection.prepareStatement(SELECT_BY_ID);
			statement.setInt(1, key);
			ResultSet resultSet = statement.executeQuery();
			if(resultSet.next()) {
				city = makeCity(resultSet);
			} else {
				throw new DaoException("No city with such key");
			}
		} catch (ConnectionPoolException | SQLException e) {
			throw new DaoException(e);
		} finally {
			closeStatement(statement);
			connectionPool.releaseConnection(connection);
		}
		return city;
	}

	@Override
	public void add(Integer key, City entity) throws DaoException {
		ConnectionPool connectionPool = ConnectionPool.getInstance();
		PreparedStatement statement = null;
		ConnectionWrapper connection = null;
		try {
			connection = connectionPool.grapConnection();
			statement = connection.prepareStatement(ADD_NEW);
			statement.setString(1, entity.getName());
			statement.setString(2, entity.getDescription());
			statement.setInt(3, entity.getCountry().getId());
			statement.executeUpdate();
		} catch (ConnectionPoolException | SQLException e) {
			throw new DaoException(e);
		} finally {
			closeStatement(statement);
			connectionPool.releaseConnection(connection);
		}
	}

	@Override
	public void delete(Integer key) throws DaoException {
		ConnectionPool connectionPool = ConnectionPool.getInstance();
		PreparedStatement statement = null;
		ConnectionWrapper connection = null;
		try {
			connection = connectionPool.grapConnection();
			statement = connection.prepareStatement(DELETE_ELEMENT);
			statement.setInt(1, key);
			statement.executeUpdate();
		} catch (ConnectionPoolException | SQLException e) {
			throw new DaoException(e);
		} finally {
			closeStatement(statement);
			connectionPool.releaseConnection(connection);
		}
	}

	@Override
	public void delete(City entity) {
		throw new UnsupportedOperationException();
	}

	@Override
	public City update(City entity) throws DaoException {
		ConnectionPool connectionPool = ConnectionPool.getInstance();
		PreparedStatement statement = null;
		ConnectionWrapper connection = null;
		try {
			connection = connectionPool.grapConnection();
			statement = connection.prepareStatement(UPDATE_ELEMENT);
			statement.setString(1, entity.getName());
			statement.setString(2, entity.getDescription());
			statement.setInt(3, entity.getCountry().getId());
			statement.executeUpdate();
		} catch (ConnectionPoolException | SQLException e) {
			throw new DaoException(e);
		} finally {
			closeStatement(statement);
			connectionPool.releaseConnection(connection);
		}
	}

	
	private City makeCity(ResultSet resultSet) throws DaoException {
		CountryDao countryDao = new CountryDao();
		try {
			return new City(resultSet.getInt("city_id"), 
			resultSet.getString("city_name"), 
			resultSet.getString("city_description"), 
			countryDao.findByKey(resultSet.getInt("country_id")));
		} catch (SQLException | DaoException e) {
			throw new DaoException(e);
		}
	}

}
